     1                                  ;用户程序
     2                                  ;中断过程的演示
     3                                  
     4                                  SECTION header vstart=0
     5 00000000 [00000000]              	program_length		dd program_end
     6 00000004 [4901]                  	program_entry		dw start
     7 00000006 [00000000]              						dd section.code_seg.start
     8 0000000A 0300                    	seg_table_len		dw (header_end - seg_table)/4
     9                                  	
    10                                  	seg_table:
    11 0000000C [00000000]              	code_seg_item		dd section.code_seg.start
    12 00000010 [00000000]              	data_seg_item		dd section.data_seg.start
    13 00000014 [00000000]              	stack_seg_item		dd section.stack_seg.start
    14                                  header_end:
    15                                  
    16                                  ;代码段
    17                                  SECTION code_seg align=16 vstart=0	
    18                                  	;过程：显示字符串
    19                                  	;输入: DS:BX=字符串的段地址:偏移地址
    20                                  	display_string:
    21 00000000 50                      		push ax
    22 00000001 53                      		push bx
    23 00000002 51                      		push cx
    24                                  	.display_loop:
    25 00000003 8A0F                    		mov cl, [bx]  ; 从ds:bx地址处获得单个字符
    26 00000005 08C9                    		or cl, cl     ; 影响标志寄存器中的ZF位，ZF=0说明取到了字符串0终止
    27 00000007 7406                    		jz .exit_string
    28 00000009 E80700                  		call put_char
    29 0000000C 43                      		inc bx
    30 0000000D EBF4                    		jmp .display_loop
    31                                  	.exit_string:
    32 0000000F 59                      		pop cx
    33 00000010 5B                      		pop bx
    34 00000011 58                      		pop ax
    35 00000012 C3                      		ret
    36                                  	
    37                                  	;过程：显示单个字符
    38                                  	;输入：cl=单个字符ascii码
    39                                  	put_char:
    40 00000013 50                      		push ax
    41 00000014 53                      		push bx
    42 00000015 51                      		push cx
    43 00000016 52                      		push dx
    44 00000017 1E                      		push ds
    45 00000018 06                      		push es  ; 保护现场，相关寄存器压栈保护
    46                                  
    47 00000019 E80D00                  		call get_cursor  ; 获取光标当前位置
    48 0000001C E82300                  		call handle_char ; 处理字符
    49 0000001F E87F00                  		call set_cursor  ; 设置光标位置
    50                                  
    51 00000022 07                      		pop es
    52 00000023 1F                      		pop ds
    53 00000024 5A                      		pop dx
    54 00000025 59                      		pop cx
    55 00000026 5B                      		pop bx
    56 00000027 58                      		pop ax
    57 00000028 C3                      		ret
    58                                  
    59                                  	;过程：获取光标位置
    60                                  	;输出：BX=光标位置16位数
    61                                  	get_cursor:
    62                                  		; 这段获取的是光标高8位
    63 00000029 BAD403                  		mov dx, 0x3d4  ; 索引寄存器端口号为0x3d4
    64 0000002C B00E                    		mov al, 0x0e   ; 光标寄存器高8位，索引值是14(0x0e)
    65 0000002E EE                      		out dx, al     ; 向该端口写入值，表示访问光标寄存器(该光标寄存器存储着光标值的高8位)
    66 0000002F BAD503                  		mov dx, 0x3d5  ; 数据端口为0x3d5
    67 00000032 EC                      		in al, dx      ; 从这个端口读入1字节数据存放到al寄存器中
    68 00000033 88C4                    		mov ah, al     ; 放到高8位
    69                                  		; 这段获取的是光标低8位
    70 00000035 BAD403                  		mov dx, 0x3d4
    71 00000038 B00F                    		mov al, 0x0f   ; 光标寄存器低8位，索引值是15
    72 0000003A EE                      		out dx, al     ; 访问光标寄存器低8位
    73 0000003B BAD503                  		mov dx, 0x3d5
    74 0000003E EC                      		in al, dx      ; 低8位
    75 0000003F 89C3                    		mov bx, ax     ; BX=光标位置16位数
    76 00000041 C3                      		ret
    77                                  
    78                                  	;过程：处理字符
    79                                  	;输入：CL=单个字符ASCII码，BX=光标位置
    80                                  	handle_char:
    81 00000042 80F90D                  		cmp cl, 0x0d    ; 是不是回车字符
    82 00000045 7407                    		jz .handle_cr   ; 是回车字符，跳转到处理回车
    83 00000047 80F90A                  		cmp cl, 0x0a    ; 是不是换行符
    84 0000004A 740E                    		jz .handle_lf   ; 是换行符，跳转到处理换行
    85 0000004C EB14                    		jmp .handle_other ; 正常显示可打印字符
    86                                  
    87                                  	.handle_cr:
    88 0000004E 89D8                    		mov ax, bx
    89 00000050 B350                    		mov bl, 80
    90 00000052 F6F3                    		div bl          ; 除以80得到行号,这是16位除法，商放在AL中
    91 00000054 F6E3                    		mul bl          ; 此时，AX中存放的就是当前行首的光标值
    92 00000056 89C3                    		mov bx, ax
    93 00000058 EB17                    		jmp .end_handle
    94                                  
    95                                  	.handle_lf:
    96 0000005A 83C350                  		add bx, 80      ; 是换行符就+1行
    97 0000005D E81200                  		call roll_screen ; 如果光标原先就在屏幕最后一行，那么应该根据情况滚屏
    98 00000060 EB0F                    		jmp .end_handle
    99                                  
   100                                  	.handle_other:
   101 00000062 B800B8                  		mov ax, 0xb800  ; 显存地址
   102 00000065 8EC0                    		mov es, ax
   103 00000067 D1E3                    		shl bx, 1       ; 左移一位相当于乘以2
   104 00000069 26880F                  		mov [es:bx], cl ; 写入所显示的字符
   105 0000006C D1EB                    		shr bx, 1       ; 下一个字符位置，将字节偏移地址恢复为字符位置
   106 0000006E 83C301                  		add bx, 1       ; 字符位置+1
   107                                  
   108                                  	.end_handle:
   109 00000071 C3                      		ret
   110                                  
   111                                  	;过程：滚屏
   112                                  	;输入：BX=光标位置
   113                                  	roll_screen:
   114 00000072 81FBD007                		cmp bx, 2000
   115 00000076 7C28                    		jl .end_roll    ; 如果光标小于2000，没有超出屏幕显示，反之，需要执行滚动屏幕内容
   116 00000078 53                      		push bx         ; 待会要用到bx寄存器，所以先压栈保存
   117 00000079 B800B8                  		mov ax, 0xb800
   118 0000007C 8ED8                    		mov ds, ax
   119 0000007E 8EC0                    		mov es, ax
   120 00000080 FC                      		cld             ; clear direction flag,清除方向标志位
   121 00000081 BEA000                  		mov si, 0xa0    ; 源位置0xa0=160，从屏幕第2行第1列的位置开始
   122 00000084 BF0000                  		mov di, 0x00    ; 目标位置从0x00处开始，屏幕第1行第1列
   123 00000087 B98007                  		mov cx, 1920    ; 1920=24行*每行80个字符*每个字符的占用字节数 / 字(2字节)
   124 0000008A F3A5                    		rep movsw       ; rep=重复执行,movsw = mov string word, DS:SI -> ES:DI
   125                                  
   126                                  		; 由于屏幕最后一行还保持的原来的内容，需要清除最后一行
   127 0000008C BB000F                  		mov bx, 3840    ; 屏幕上第25行第1列在显存中的偏移位置
   128 0000008F B95000                  		mov cx, 80
   129                                  	.cls:
   130 00000092 26C7072007              		mov word [es:bx], 0x0720  ; 黑底白字的空白字符
   131 00000097 83C302                  		add bx, 2
   132 0000009A E2F6                    		loop .cls
   133                                  
   134 0000009C 5B                      		pop bx
   135 0000009D 83EB50                  		sub bx, 80    ; 滚屏后，移动到最后一行的行首，因为之前判断是不是换行符已经加了80
   136                                  	.end_roll:
   137 000000A0 C3                      		ret
   138                                  		
   139                                  	;过程：设置光标位置
   140                                  	;输入：BX=光标位置
   141                                  	set_cursor:
   142 000000A1 BAD403                  		mov dx, 0x3d4
   143 000000A4 B00E                    		mov al, 0x0e
   144 000000A6 EE                      		out dx, al     ; 通过端口0x3d4访问索引寄存器，写入0x0e,表示访问光标寄存器高8位
   145 000000A7 BAD503                  		mov dx, 0x3d5
   146 000000AA 88F8                    		mov al, bh
   147 000000AC EE                      		out dx, al     ; 通过数据端口写入BX寄存器中高8位数值
   148                                  		; 同样的写入低8位
   149 000000AD BAD403                  		mov dx, 0x3d4
   150 000000B0 B00F                    		mov al, 0x0f
   151 000000B2 EE                      		out dx, al
   152 000000B3 BAD503                  		mov dx, 0x3d5
   153 000000B6 88D8                    		mov al, bl
   154 000000B8 EE                      		out dx, al
   155 000000B9 C3                      		ret
   156                                  	
   157                                  	;中断过程：intr_70
   158                                  	intr_70:
   159 000000BA 50                      		push ax
   160 000000BB 53                      		push bx
   161 000000BC 51                      		push cx
   162 000000BD 52                      		push dx
   163 000000BE 06                      		push es
   164                                  		
   165 000000BF 29C0                    		sub ax,ax
   166                                  	.w0:
   167 000000C1 B00A                    		mov al,0x0a		;将立即数 0x0a 加载到寄存器 AL 中
   168 000000C3 0C80                    		or al,0x80		;0x80=1000_0000,关NMI中断，确保访问CMOS期间不会被打断
   169 000000C5 E670                    		out 0x70,al		;通过0x70端口写入要访问的寄存器地址，al=0x8a,表示要访问 CMOS 寄存器 0x0a，同时禁用 NMI
   170 000000C7 E471                    		in al,0x71		;通过数据端口0x71读取RTC寄存器A
   171 000000C9 A880                    		test al,0x80	;测试寄存器AL中的第7位是否为1，也是UIP状态位，
   172                                  						;UIP=1表示访问CMOS RAM中的日期和时间是安全的
   173 000000CB 75F4                    		jnz .w0			;继续等待RTC更新周期结束
   174                                  		
   175                                  		
   176 000000CD 30C0                    		xor al,al		;al清零0
   177 000000CF 0C80                    		or al,0x80		;关NMI中断
   178 000000D1 E670                    		out 0x70,al		;写入要访问的内存单元地址，0x80,访问0号单元，端口0x70的位7用于禁止或允许NMI
   179 000000D3 E471                    		in al,0x71		;读RTC当前时间(秒)
   180 000000D5 50                      		push ax			;读出的数据压栈保存
   181                                  		
   182 000000D6 B002                    		mov al,2		;访问CMOS RAM 2号内存单元，即内存偏移地址为0x02
   183 000000D8 0C80                    		or al,0x80
   184 000000DA E670                    		out 0x70,al
   185 000000DC E471                    		in al,0x71		;读RTC当前时间(分)
   186 000000DE 50                      		push ax
   187                                  		
   188 000000DF B004                    		mov al,4
   189 000000E1 0C80                    		or al,0x80
   190 000000E3 E670                    		out 0x70,al
   191 000000E5 E471                    		in al,0x71		;读RTC当前时间(时)
   192 000000E7 50                      		push ax
   193                                  		
   194 000000E8 B00C                    		mov al,0x0c
   195 000000EA E670                    		out 0x70,al
   196 000000EC E471                    		in al,0x71		;读一下RTC的寄存器C，使得所有中断标志复位
   197                                  		
   198 000000EE B800B8                  		mov ax,0xb800
   199 000000F1 8EC0                    		mov es,ax		;指向屏幕显示缓冲区
   200                                  		
   201                                  		
   202 000000F3 58                      		pop ax					;第一次出栈的是 时
   203 000000F4 E84200                  		call bcd_to_ascii		;调用过程处理成ascii码
   204 000000F7 BBC807                  		mov bx,12*160+36*2		;从屏幕上的12行36列开始显示
   205 000000FA 268827                  		mov [es:bx],ah
   206 000000FD 26884702                		mov [es:bx+2],al		;显示两位小时数字
   207                                  		
   208 00000101 B03A                    		mov al,':'
   209 00000103 26884704                		mov [es:bx+4],al		;显示分隔符:
   210 00000107 26F65705                		not byte [es:bx+5]      ;反转显示属性 
   211                                  		
   212 0000010B 58                      		pop ax					;分
   213 0000010C E82A00                  		call bcd_to_ascii
   214 0000010F 26886706                		mov [es:bx+6],ah
   215 00000113 26884708                		mov [es:bx+8],al
   216                                  		
   217 00000117 B03A                    		mov al,':'
   218 00000119 2688470A                		mov [es:bx+10],al       ;显示分隔符':'
   219 0000011D 26F6570B                		not byte [es:bx+11]     ;反转显示属性		
   220                                  		
   221 00000121 58                      		pop ax
   222 00000122 E81400                  		call bcd_to_ascii		;秒
   223 00000125 2688670C                		mov [es:bx+12],ah
   224 00000129 2688470E                		mov [es:bx+14],al
   225                                  
   226 0000012D B020                    		mov al,0x20				;向8259中断芯片发送中断结束命令，中断结束命令的代码是0x20
   227 0000012F E6A0                    		out 0xa0,al				;向从片发送
   228 00000131 E620                    		out 0x20,al             ;向主片发送
   229                                  		
   230 00000133 07                      		pop es
   231 00000134 5A                      		pop dx
   232 00000135 59                      		pop cx
   233 00000136 5B                      		pop bx
   234 00000137 58                      		pop ax
   235                                  		
   236 00000138 CF                      		iret			;interrupt return 中断返回指令，依次恢复IP、CS、FS
   237                                  	
   238                                  	;过程：BCD码转ASCII码
   239                                  	;输入：AL=bcd码
   240                                  	;输出：AX=ASCII码
   241                                  	bcd_to_ascii:
   242 00000139 88C4                    		mov ah,al		;AL中的高4位和低4位分别是十位数字、个位数字，这里做拆分
   243 0000013B 240F                    		and al,0x0f		;仅保留低4位
   244 0000013D 0430                    		add al,0x30		;加上0x30,得到该数字对应的ASCII码
   245                                  		
   246 0000013F C0EC04                  		shr ah,4		;然后处理高位，ah右移4位到低4位
   247 00000142 80E40F                  		and ah,0x0f
   248 00000145 80C430                  		add ah,0x30
   249                                  		
   250 00000148 C3                      		ret
   251                                  	
   252                                  	;程序入口点
   253                                  	start:
   254 00000149 A1[1400]                		mov ax,[stack_seg_item]
   255 0000014C 8ED0                    		mov ss,ax
   256 0000014E BC[0001]                		mov sp,stack_seg_end
   257 00000151 A1[1000]                		mov ax,[data_seg_item]
   258 00000154 8ED8                    		mov ds,ax
   259                                  
   260 00000156 BB[0000]                		mov bx,init_msg                    ;显示初始信息 
   261 00000159 E8A4FE                  		call display_string
   262                                  
   263 0000015C BB[0E00]                		mov bx,inst_msg                    ;显示安装信息 
   264 0000015F E89EFE                  		call display_string
   265                                  
   266                                  		;根据中断号计算出该中断的偏移地址
   267                                  		;sub ax,ax		;ax寄存器清空
   268 00000162 B070                    		mov al,0x70
   269 00000164 B304                    		mov bl,4
   270 00000166 F6E3                    		mul bl
   271 00000168 89C3                    		mov bx,ax			;BX=该中断在中断向量表中的偏移量
   272                                  
   273 0000016A FA                      		cli				;IF=0，关中断
   274                                  
   275                                  		;将70号中断处理程序安装到中断向量表中
   276 0000016B 06                      		push es
   277 0000016C B80000                  		mov ax,0x0000
   278 0000016F 8EC0                    		mov es,ax 					;es指向中断向量表所在段的段地址
   279 00000171 26C707[BA00]            		mov word [es:bx],intr_70		;70中断程序的偏移地址
   280 00000176 268C4F02                		mov word [es:bx+2],cs			;代码段段地址
   281 0000017A 07                      		pop es
   282                                  
   283                                  		;设置RTC工作状态，使它能够产生中断信号给8259中断控制器
   284 0000017B B00B                    		mov al,0x0b				;访问RTC中的寄存器B
   285 0000017D 0C80                    		or al,0x80				;关NMI中断
   286 0000017F E670                    		out 0x70,al				;通过0x70端口指定要访问的CMOS RAM内存单元
   287                                  								;这里访问的就是寄存器B
   288                                  
   289                                  		;BCD码为0001_0010
   290                                  		;允许更新周期照常发生
   291                                  		;禁止周期性中断，禁止闹钟功能，允许更新周期结束中断
   292                                  		;使用24小时制，日期和时间采用BCD编码							
   293 00000181 B012                    		mov al,0x12				
   294 00000183 E671                    		out 0x71,al				;通过数据端口0x71写寄存器B
   295                                  
   296                                  		;读取寄存器C，来检查中断原因
   297 00000185 B00C                    		mov al,0x0c				
   298 00000187 E670                    		out 0x70,al				;访问RTC中的寄存器C，同时也打开了NMI
   299 00000189 E471                    		in al,0x71				;通过数据端口0x71读取REG C中的内容，并自动清零
   300                                  
   301                                  		;修改8259芯片中的IMR寄存器，允许RTC中断
   302 0000018B E4A1                    		in al,0xa1			;通过0xal端口读取从片IMR寄存器
   303 0000018D 24FE                    		and al,0xfe			;修改位0，位0对应IR0，0=允许中断，1=关中断
   304 0000018F E6A1                    		out 0xa1,al			;再写回
   305                                  
   306 00000191 FB                      		sti					;开中断
   307                                  
   308 00000192 BB[3000]                		mov bx,done_msg
   309 00000195 E868FE                  		call display_string
   310                                  
   311 00000198 BB[3700]                		mov bx,tips_msg
   312 0000019B E862FE                  		call display_string
   313                                  
   314 0000019E B800B8                  		mov ax,0xb800
   315 000001A1 8ED8                    		mov ds,ax
   316 000001A3 C606C20740              		mov byte [12*160 + 33*2],'@'	;第12行33列显示字符@
   317                                  	  
   318                                  	.idle:
   319 000001A8 F4                      		hlt								;停机指令，进入低功耗状态，直到用中断唤醒
   320 000001A9 F616C307                		not byte [12*160 + 33*2+1]      ;反转显示属性
   321 000001AD EBF9                    		jmp .idle
   322                                  	  
   323                                  code_seg_end:
   324                                  
   325                                  ;数据段
   326                                  SECTION data_seg align=16 vstart=0
   327 00000000 5374617274696E672E-         init_msg       db 'Starting...',0x0d,0x0a,0
   327 00000009 2E2E0D0A00         
   328 0000000E 496E7374616C6C696E-         inst_msg       db 'Installing a new interrupt 70H...',0
   328 00000017 672061206E65772069-
   328 00000020 6E7465727275707420-
   328 00000029 3730482E2E2E00     
   329 00000030 446F6E652E0D0A              done_msg       db 'Done.',0x0d,0x0a,
   330 00000037 436C6F636B20697320-         tips_msg       db 'Clock is now working.',0
   330 00000040 6E6F7720776F726B69-
   330 00000049 6E672E00           
   331                                  data_seg_end:
   332                                  
   333                                  ;栈段
   334                                  SECTION stack_seg align=16 vstart=0
   335 00000000 <res 100h>              	resb 256
   335          ******************       warning: uninitialized space declared in stack_seg section: zeroing [-w+zeroing]
   336                                  stack_seg_end:
   337                                  
   338                                  ;追踪程序长度
   339                                  SECTION program_trail
   340                                  program_end:

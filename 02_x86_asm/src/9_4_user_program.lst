     1                                  ;描述：用户程序清单
     2                                  ;作者：fanx
     3                                  ;日期：2025.02.11
     4                                  
     5                                  ;程序头部段
     6                                  SECTION header vstart=0
     7 00000000 [00000000]              	program_length	dd program_end							;[0x00] 程序总长度
     8 00000004 [A200]                  	program_entry	dw start								;[0x04] 程序入口，偏移地址
     9 00000006 [00000000]              					dd section.code_seg_1.start				;[0x06] 段地址
    10 0000000A 0500                    	seg_table_len	dw (header_end - code_seg_1_item)/4		;[0x0a] 段重定位表项数量
    11                                  	
    12                                  	;段重定位表
    13 0000000C [00000000]              	code_seg_1_item dd section.code_seg_1.start				;[0x0c] 代码段1的段地址
    14 00000010 [00000000]              	code_seg_2_item dd section.code_seg_2.start				;[0x10] 代码段2的段地址
    15 00000014 [00000000]              	data_seg_1_item dd section.data_seg_1.start				;[0x14] 数据段1的段地址
    16 00000018 [00000000]              	data_seg_2_item dd section.data_seg_2.start				;[0x18] 数据段2的段地址
    17 0000001C [00000000]              	stack_seg_item	dd section.stack_seg.start				;[0x1c] 栈段段地址
    18                                  header_end:
    19                                  
    20                                  ;代码段1
    21                                  SECTION code_seg_1 align=16 vstart=0
    22                                  
    23                                  	;过程：显示字符串
    24                                  	;输入: DS:BX=字符串的段地址:偏移地址
    25                                  	;循环调用get_char过程获取单个字符，判断是否为0，为0则终止
    26                                  	display_string:
    27 00000000 8A0F                    		mov cl,[bx]			;从ds:bx地址处获得单个字符，由于一个字符占1个字节，所以用8位寄存器
    28 00000002 08C9                    		or cl,cl			;影响标志寄存器中的ZF位，ZF=0说明取到了字符串0终止
    29 00000004 7406                    		jz .exit_string
    30                                  		
    31 00000006 E80400                  		call put_char
    32 00000009 43                      		inc bx
    33 0000000A EBF4                    		jmp display_string
    34                                  		
    35                                  	.exit_string:
    36 0000000C C3                      		ret
    37                                  	
    38                                  	;过程：显示单个字符
    39                                  	;输入：cl=单个字符ascii码
    40                                  	put_char:
    41 0000000D 50                      		push ax
    42 0000000E 53                              push bx
    43 0000000F 51                              push cx
    44 00000010 52                              push dx
    45 00000011 1E                              push ds
    46 00000012 06                              push es			;保护现场，相关寄存器压栈保护
    47                                  		
    48                                  		;获取光标当前位置
    49                                  		;这段获取的是光标高8位
    50 00000013 BAD403                  		mov dx,0x3d4		;索引寄存器端口号为0x3d4
    51 00000016 B00E                    		mov al,0x0e			;光标寄存器高8位，索引值是14(0x0e)
    52 00000018 EE                      		out dx,al			;向该端口写入值，表示访问光标寄存器(该光标寄存器存储着光标值的高8位)
    53 00000019 BAD503                  		mov dx,0x3d5		;数据端口为0x3d5
    54 0000001C EC                      		in al,dx			;从这个端口读入1字节数据存放到al寄存器中
    55 0000001D 88C4                    		mov ah,al			;放到高8位
    56                                  		;这段获取的是光标低8位
    57 0000001F BAD403                  		mov dx,0x3d4
    58 00000022 B00F                    		mov al,0x0f			;光标寄存器低8位，索引值是15
    59 00000024 EE                      		out dx,al			;访问光标寄存器低8位
    60 00000025 BAD503                  		mov dx,0x3d5
    61 00000028 EC                      		in al,dx			;低8位
    62 00000029 89C3                    		mov bx,ax			;BX=光标位置16位数
    63                                  		
    64                                  		;判断是否为回车字符
    65                                  		;回车字符：应当把光标移动到当前行的行首
    66                                  		;做法：当前光标位置除以80，得到的商就是当前行的行号，然后在乘以80就是当前行首的光标数值
    67                                  		;示意图如下：
    68                                  		;0行：0   ---------- 79
    69                                  		;1行：80  ---------- 159
    70                                  		;2行：160 ---------- 239
    71                                  		;假设光标位置是220，除以80得到商（行号）=2，再乘以80，得到160，证明了这是行首
    72 0000002B 80F90D                  		cmp cl,0x0d
    73 0000002E 750C                    		jnz .put_0a		;不是，再判断是不是换行符
    74 00000030 89D8                    		mov ax,bx
    75 00000032 B350                    		mov bl,80		
    76 00000034 F6F3                    		div bl			;除以80得到行号,这是16位除法，商放在AL中
    77 00000036 F6E3                    		mul bl			;此时，AX中存放的就是当前行首的光标值
    78 00000038 89C3                    		mov bx,ax
    79 0000003A EB47                    		jmp .set_cursor	;跳转到设置光标
    80                                  		
    81                                  	.put_0a:
    82 0000003C 80F90A                  		cmp cl,0x0a			;是不是换行符
    83 0000003F 7505                    		jnz .put_other		;不是，正常显示字符
    84 00000041 83C350                  		add bx,80			;是换行符就+1行
    85 00000044 EB0F                    		jmp .roll_screnn	;如果光标原先就在屏幕最后一行，那么应该根据情况滚屏
    86                                  		 	
    87                                  	;正常显示可打印字符
    88                                  	;光标占用一个字符的位置，一个字符=2个字节，所以：光标在显存中的偏移地址=字符位置*2=下一个字符的位置
    89                                  	.put_other:
    90 00000046 B800B8                  		mov ax,0xb800		;显存地址
    91 00000049 8EC0                    		mov es,ax
    92 0000004B D1E3                    		shl bx,1			;左移一位相当于乘以2，因为这里bx中的值是二进制，如果是16进制，那么左移一位相当于乘以4
    93 0000004D 26880F                  		mov [es:bx],cl		;写入所显示的字符
    94                                  		
    95 00000050 D1EB                    		shr bx,1			;下一个字符位置，将字节偏移地址恢复为字符位置
    96 00000052 83C301                  		add bx,1			;字符位置+1
    97                                  	
    98                                  	;滚屏，实际上就是将第2-25的内容整体往上提一行
    99                                  	;也就是把每一行都往上移一行，为了提高效率，使用rep movsw完成传送工作
   100                                  	.roll_screnn:
   101 00000055 81FBD007                		cmp bx,2000
   102 00000059 7C28                    		jl .set_cursor		;如果光标小于2000，没有超出屏幕显示，反之，需要执行滚动屏幕内容
   103                                  		
   104 0000005B 53                      		push bx				;待会要用到bx寄存器，所以先压栈保存
   105                                  		
   106 0000005C B800B8                  		mov ax,0xb800
   107 0000005F 8ED8                    		mov ds,ax
   108 00000061 8EC0                    		mov es,ax
   109 00000063 FC                      		cld					;clear direction flag,清除方向标志位
   110                                  							;会设置标志寄存器中DF=0，串操作指令会按照地址递增的方向处理内存
   111 00000064 BEA000                  		mov si,0xa0			;源位置0xa0=160，从屏幕第2行第1列的位置开始
   112 00000067 BF0000                  		mov di,0x00			;目标位置从0x00处开始，屏幕第1行第1列
   113 0000006A B98007                  		mov cx,1920			;1920=24行*每行80个字符*每个字符的占用字节数 / 字(2字节)
   114 0000006D F3A5                    		rep movsw			;rep=重复执行,movsw = mov string word,
   115                                  							; DS:SI -> ES:DI
   116                                  	
   117                                  	;由于屏幕最后一行还保持的原来的内容，需要清除最后一行
   118 0000006F BB000F                  		mov bx,3840			;屏幕上第25行第1列在显存中的偏移位置
   119 00000072 B95000                  		mov cx,80
   120                                  	.cls:
   121 00000075 26C7072007              		mov word [es:bx],0x0720		;黑底白字的空白字符
   122 0000007A 83C302                  		add bx,2
   123 0000007D E2F6                    		loop .cls
   124                                  		
   125 0000007F 5B                      		pop bx
   126 00000080 83EB50                  		sub bx,80		;滚屏后，移动到最后一行的行首，因为之前判断是不是换行符已经加了80
   127                                  	
   128                                  	.set_cursor:
   129 00000083 BAD403                  		mov dx,0x3d4,
   130 00000086 B00E                    		mov al,0x0e
   131 00000088 EE                      		out dx,al		;通过端口0x3d4访问索引寄存器，写入0x0e,表示访问光标寄存器高8位
   132 00000089 BAD503                  		mov dx,0x3d5
   133 0000008C 88F8                    		mov al,bh
   134 0000008E EE                      		out dx,al		;通过数据端口写入BX寄存器中高8位数值
   135                                  		;同样的写入低8位
   136 0000008F BAD403                  		mov dx,0x3d4
   137 00000092 B00F                    		mov al,0x0f
   138 00000094 EE                      		out dx,al
   139 00000095 BAD503                  		mov dx,0x3d5
   140 00000098 88D8                    		mov al,bl
   141 0000009A EE                      		out dx,al
   142                                  		
   143 0000009B 07                      		pop es
   144 0000009C 1F                              pop ds
   145 0000009D 5A                              pop dx
   146 0000009E 59                              pop cx
   147 0000009F 5B                              pop bx
   148 000000A0 58                              pop ax
   149                                  
   150 000000A1 C3                              ret
   151                                  	start:
   152 000000A2 A1[1C00]                		mov ax,[stack_seg_item]			;设置自己的栈段
   153 000000A5 8ED0                    		mov ss,ax
   154 000000A7 BC[0001]                		mov sp,stack_seg_end			;栈指针地址为256
   155                                  		
   156 000000AA A1[1400]                		mov ax,[data_seg_1_item]		;设置自己的数据段
   157 000000AD 8ED8                    		mov ds,ax
   158                                  		
   159 000000AF BB[0000]                		mov bx,msg0
   160 000000B2 E84BFF                  		call display_string				;调用过程显示第一段信息
   161                                  		
   162                                  		;这里使用retf实现段间转移，ref不依赖于call far或者jmp far指令
   163                                  		;retf指令依次从栈中弹出IP、CS
   164 000000B5 26FF36[1000]            		push word [es:code_seg_2_item]	;压入代码段code_seg_2段地址
   165 000000BA B8[0000]                		mov ax,begin				
   166 000000BD 50                      		push ax						;压入偏移地址
   167 000000BE CB                      		retf						;转移到代码段2执行
   168                                  	
   169                                  	continue:
   170 000000BF 26A1[1800]              		mov ax,[es:data_seg_2_item]
   171 000000C3 8ED8                    		mov ds,ax					;切换到数据段2
   172 000000C5 BB[0000]                		mov bx,msg1
   173 000000C8 E835FF                  		call display_string
   174                                  		
   175 000000CB EBFE                    		jmp $
   176                                  		
   177                                  code_seg_1_end:
   178                                  
   179                                  ;代码段2
   180                                  SECTION code_seg_2 align=16 vstart=0
   181                                  
   182                                  	begin:
   183 00000000 26FF36[0C00]            		push word [es:code_seg_1_item]
   184 00000005 B8[BF00]                		mov ax,continue
   185 00000008 50                      		push ax
   186 00000009 CB                      		retf						;转移到代码段1继续执行
   187                                  	
   188                                  code_seg_2_end:
   189                                  
   190                                  ;数据段1
   191                                  SECTION data_seg_1 align=16 vstart=0
   192                                  	;屏幕上需要显示的信息
   193                                  	;0x0d-回车，0x0a-换行
   194 00000000 202054686973206973-         msg0 db '  This is NASM - the famous Netwide Assembler. '
   194 00000009 204E41534D202D2074-
   194 00000012 68652066616D6F7573-
   194 0000001B 204E65747769646520-
   194 00000024 417373656D626C6572-
   194 0000002D 2E20               
   195 0000002F 4261636B2061742053-              db 'Back at SourceForge and in intensive development! '
   195 00000038 6F75726365466F7267-
   195 00000041 6520616E6420696E20-
   195 0000004A 696E74656E73697665-
   195 00000053 20646576656C6F706D-
   195 0000005C 656E742120         
   196 00000061 476574207468652063-              db 'Get the current versions from http://www.nasm.us/.'
   196 0000006A 757272656E74207665-
   196 00000073 7273696F6E73206672-
   196 0000007C 6F6D20687474703A2F-
   196 00000085 2F7777772E6E61736D-
   196 0000008E 2E75732F2E         
   197 00000093 0D0A0D0A                         db 0x0d,0x0a,0x0d,0x0a
   198 00000097 20204578616D706C65-              db '  Example code for calculate 1+2+...+1000:',0x0d,0x0a,0x0d,0x0a
   198 000000A0 20636F646520666F72-
   198 000000A9 2063616C63756C6174-
   198 000000B2 6520312B322B2E2E2E-
   198 000000BB 2B313030303A0D0A0D-
   198 000000C4 0A                 
   199 000000C5 2020202020786F7220-              db '     xor dx,dx',0x0d,0x0a
   199 000000CE 64782C64780D0A     
   200 000000D5 2020202020786F7220-              db '     xor ax,ax',0x0d,0x0a
   200 000000DE 61782C61780D0A     
   201 000000E5 2020202020786F7220-              db '     xor cx,cx',0x0d,0x0a
   201 000000EE 63782C63780D0A     
   202 000000F5 202040403A0D0A                   db '  @@:',0x0d,0x0a
   203 000000FC 2020202020696E6320-              db '     inc cx',0x0d,0x0a
   203 00000105 63780D0A           
   204 00000109 202020202061646420-              db '     add ax,cx',0x0d,0x0a
   204 00000112 61782C63780D0A     
   205 00000119 202020202061646320-              db '     adc dx,0',0x0d,0x0a
   205 00000122 64782C300D0A       
   206 00000128 2020202020696E6320-              db '     inc cx',0x0d,0x0a
   206 00000131 63780D0A           
   207 00000135 2020202020636D7020-              db '     cmp cx,1000',0x0d,0x0a
   207 0000013E 63782C313030300D0A 
   208 00000147 20202020206A6C6520-              db '     jle @@',0x0d,0x0a
   208 00000150 40400D0A           
   209 00000154 20202020202E2E2E20-              db '     ... ...(Some other codes)',0x0d,0x0a,0x0d,0x0a
   209 0000015D 2E2E2E28536F6D6520-
   209 00000166 6F7468657220636F64-
   209 0000016F 6573290D0A0D0A     
   210 00000176 00                               db 0	;标志字符串结束，0终止的字符串
   211                                  data_seg_1_end:
   212                                  
   213                                  ;数据段2
   214                                  SECTION data_seg_2 align=16 vstart=0
   215 00000000 20205468652061626F-         msg1 db '  The above contents is written by LeeChung. '
   215 00000009 766520636F6E74656E-
   215 00000012 747320697320777269-
   215 0000001B 7474656E206279204C-
   215 00000024 65654368756E672E20 
   216 0000002D 323031312D30352D30-              db '2011-05-06'
   216 00000036 36                 
   217 00000037 00                               db 0
   218                                  data_seg_2_end:
   219                                  
   220                                  ;栈段
   221                                  SECTION stack_seg align=16 vstart=0
   222 00000000 <res 100h>              	resb 256	;从当前位置开始保留指定数量的字节，但不初始化它们的值
   222          ******************       warning: uninitialized space declared in stack_seg section: zeroing [-w+zeroing]
   223                                  				;汇编地址范围0~255
   224                                  stack_seg_end:	;此处地址则为256
   225                                  
   226                                  ;程序尾部，用于获得程序整体长度
   227                                  SECTION tail align=16
   228                                  program_end:
